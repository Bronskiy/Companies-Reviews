<?php

/**
 * Companies_Model_ReviewTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Companies_Model_ReviewTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object Companies_Model_ReviewTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Companies_Model_Review');
    }
    
    /**
     * Get last company reviews
     * @param type $companyId
     * @param type $count 
     */
    public function getCompanyLastReviews($companyId, $count = 1) {
        return $this->createQuery("r")
            ->where("r.company_id = ?  AND r.status = ?", array($companyId, Companies_Model_Review::STATUS_PUBLISHED))
            ->orderBy("r.created_at DESC")
            ->limit((int)$count)
            ->execute();
    }

    /**
     * Get latest reviews
     * @param type $companyId
     * @param type $count
     */
    public function getLatest($count=5) {
        return $this->createQuery('r')
            ->leftJoin('r.Company c')
            ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->addWhere('r.status = ?', array(Companies_Model_Review::STATUS_PUBLISHED))
            ->orderBy('r.created_at DESC')
            ->limit((int) $count)
            ->execute();
    }
    
    /**
     * Query for company reviews paginator
     * @param int $companyId
     * @param string | false $status
     * @return Doctrine_Query 
     */
    public function getQueryCompanyReviewsAll($companyId, $status = false, array $range = null) {
        $query = $this->createQuery("r")
            ->where("r.company_id = ?", array($companyId))
            ->orderBy("r.created_at DESC");
        
        if ($status && !is_array($status)) {
            $status = array($status);
        }
        
        if ($status) {
            $query->andWhereIn("r.status", $status);
        }
        
        if ($range && count($range) == 2) {
            $min = (float) array_shift($range);
            $max = (float) array_shift($range);

            if ($min == 0) {
                $query->addWhere("r.rating >= ?", array($min));
            } else {
                $query->addWhere("r.rating > ?", array($min));
            }
            
            $query->addWhere("r.rating <= ?", array($max));
        }

        return $query;
    }

    /**
     * Query for employee reviews paginator
     * @param int $employeeId
     * @param string | false $status
     * @return Doctrine_Query
     */
    public function getQueryEmployeeReviewsAll($employeeId, $status = false) {
        $query = $this->createQuery('r')
            ->where('r.company_employee_id = ?', array($employeeId))
            ->orderBy('r.created_at DESC');

        if ($status && !is_array($status)) {
            $status = array($status);
        }

        if ($status) {
            $query->andWhereIn('r.status', $status);
        }

        return $query;
    }
    
    /**
     * Review ratings statistic data for current company
     * 
     * @param int $companyId 
     */
    public function getCompanyReviewRatingStats($companyId)
    {
        return $this->createQuery('r')
                    ->select('COUNT(r.id) as cnt, r.rating')
                    ->where('r.company_id = ?', array((int)$companyId))
                    ->addWhere('r.status = ?', array(Companies_Model_Review::STATUS_PUBLISHED))
                    ->groupBy('r.rating')
                    ->execute();
    }
    
    /**
     * Query for company reviewers paginator
     * 
     * @param int $companyId
     * @param array $statuses
     * @return Doctrine_Query 
     */
    public function getQueryCompanyReviewersAll($companyId, $statuses = null) {
        $query = $this->createQuery('r')
            ->select('r.id, MIN(r.created_at) as first_review_date, r.client_from, r.client_name, r.mail, COUNT(r.id) as review_count, r.rating')
            ->where('r.company_id = ?', array($companyId))
            ->groupBy('r.mail')
            ->orderBy('first_review_date DESC');
        
        if ($statuses !== null) {
            $query->addWhere('r.status IN ?', array($statuses));
        }

        return $query;
    }
    
    /**
     * Query for reviews paginator
     * 
     * @param type $status
     * @return type 
     */
    public function getQueryReviewsAll($status = false)
    {
        $query = $this->createQuery('r')
                      ->innerJoin('r.Company c')
                      ->where('c.status != ?', Companies_Model_Company::STATUS_DELETED)
                      ->orderBy('r.created_at DESC');
        
        if($status !== false) {
            $query->where('r.status = ?', array($status));
        }
        
        return $query;
    }
    
    /**
     * Finding not delayed review by hash
     * 
     * @param type $hash
     * @return Doctrine_Collection 
     */
    public function findReviewByVideoHash($hash)
    {
        return $this->createQuery('r')
                    ->where('r.video_attach_hash = ?', array($hash))
                    ->addWhere('r.video_attach_date >= NOW()')
                    ->execute();
    }
    
    /**
     * Finding review by confirm hash
     * 
     * @param string $hash
     * @return Doctrine_Collection
     */
    public function findReviewByApproveHash($hash)
    {
        return $this->createQuery('r')
                    ->where('r.confirm_hash = ?', array($hash))
                    ->execute();
    }
    
    /**
     * Finding review by reconsile hash
     * 
     * @param string $hash
     * @return Doctrine_Collection
     */
    public function findReviewByReconcileHash($hash)
    {
        return $this->createQuery('r')
                    ->where('r.reconcile_hash = ?', array($hash))
                    ->execute();
    }

    /**
     * Get unconfirmed company by id
     * @param integer $id
     * @return Companies_Model_Review
     */
    public function getUnconfirmedReview($id)
    {
        $data =  $this->createQuery('r')
            ->select('r.*')
            ->where('r.status = ? AND r.id = ?', array(Companies_Model_Review::STATUS_UNCONFIRMED, $id))
            ->limit(1)
            ->execute();

        return count($data) ? $data->get(0) : null;
    }

    /**
     * Query for search result pagination
     * @param string $searchString
     */
    public function getQueryToFetchSearchAll($searchString, $company, $statuses) {
        $search = '%' . str_replace("%", "%%", $searchString) . '%';
        $search = array_fill(0, 4, $search);

        $query = $this->createQuery('r')
            ->select('r.*')
            ->leftJoin('r.Company c')
            ->where('c.name LIKE ? OR r.client_name LIKE ? OR r.mail LIKE ? OR r.review LIKE ?', $search)
            ->orderBy('r.id DESC');

        if ($company) {
            $query->addWhere("r.company_id = ?", array($company->id));
        }

        if ($statuses) {
            $query->addWhere("r.status IN ?", array($statuses));
        }

        return $query;
    }

    /**
     * Get unprocessed reviews
     */
    public function getUnprocessed() {
        return $this->createQuery("r")
            ->whereIn("r.status", array(Companies_Model_Review::STATUS_NOT_PROCESSED, Companies_Model_Review::STATUS_PROCESSING))
            ->orderBy("r.created_at DESC")
            ->execute();
    }

    /**
     * Get text review count
     * @param $companyId
     */
    public function getTextReviewCount($companyId) {
        return (int) $this->createQuery("r")
            ->select("COUNT(DISTINCT r.id) as review_count")
            ->leftJoin("r.Videos v ON v.review_id = r.id")
            ->where("r.company_id = ? AND v.id IS NULL AND r.status = ?", array(
                $companyId,
                Companies_Model_Review::STATUS_PUBLISHED
            ))
            ->execute()
            ->get(0)
            ->review_count;
    }

    /**
     * Get video review count
     * @param $companyId
     */
    public function getVideoReviewCount($companyId) {
        return (int) $this->createQuery("r")
            ->select("COUNT(DISTINCT r.id) as review_count")
            ->leftJoin("r.Videos v ON v.review_id = r.id")
            ->where("r.company_id = ? AND v.id IS NOT NULL AND r.status = ?", array(
                $companyId,
                Companies_Model_Review::STATUS_PUBLISHED
            ))
            ->execute()
            ->get(0)
            ->review_count;
    }

    /**
     * Get company review count
     * @param int $companyId
     * @return Doctrine_Query
     */
    public function getCompanyReviewCount($companyId) {
        $res = $this->createQuery("r")
            ->select("COUNT(r.id) AS count")
            ->where("r.company_id = ?", array($companyId))
            ->orderBy("r.created_at DESC")
            ->andWhere("r.status = ?", array(Companies_Model_Review::STATUS_PUBLISHED))
            ->execute();

        if ($res) {
            $res = (int) $res[0]->count;
        } else {
            $res = 0;
        }

        return $res;
    }

    /**
     * Get employee review count
     * @param int $employeeId
     * @return Doctrine_Query
     */
    public function getEmployeeReviewCount($employeeId) {
        $res = $this->createQuery("r")
            ->select("COUNT(r.id) AS count")
            ->where("r.company_employee_id = ?", array($employeeId))
            ->orderBy("r.created_at DESC")
            ->andWhere("r.status = ?", array(Companies_Model_Review::STATUS_PUBLISHED))
            ->execute();

        if ($res) {
            $res = (int) $res[0]->count;
        } else {
            $res = 0;
        }

        return $res;
    }
}