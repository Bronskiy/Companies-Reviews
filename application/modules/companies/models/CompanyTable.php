<?php

/**
 * Companies_Model_CompanyTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Companies_Model_CompanyTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     * @return object Companies_Model_CompanyTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Companies_Model_Company');
    }
    
    /**
     * Query for pagination
     * @param $status
     * @return Doctrine_Query 
     */
    public function getQueryToFetchAll($status = null) {
        $query = $this->createQuery('c')->orderBy("c.status ASC, c.id ASC");

        if ($status != null) {
            $query->where("c.status = ?", $status);
        } else {
            $query->where("c.status != ?", Companies_Model_Company::STATUS_DELETED);
        }

        return $query;
    }
    
    /**
     * Selecting states from company table 
     */
    public function getStates() {
        return $this->createQuery()
            ->select("DISTINCT c.state")
            ->from("Companies_Model_Company c")
            ->whereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->andWhere("c.local_business")
            ->orderBy("c.state ASC")
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
    }
    
    /**
     * Check is state exists in copanies table
     * 
     * @param string $state 
     */
    public function isStateExists($state)
    {
        $res = $this->createQuery()
                    ->select('c.state')
                    ->from('Companies_Model_Company c')
                    ->where('c.state = ? AND c.local_business', mb_strtoupper($state, 'UTF-8'))
                    ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
                    ->limit(1)
                    ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
        
        return (bool)$res; 
    }
    
    /**
     * Check is city exists in copanies table
     * 
     * @param string $state 
     */
    public function isCityExists($city)
    {
        $city = str_replace('-', '_', $city);
        
        $res = $this->createQuery()
                    ->select('c.city')
                    ->from('Companies_Model_Company c')
                    ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
                    ->andWhere('c.city LIKE ? AND c.local_business', array($city))
                    ->limit(1)
                    ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
        
        return (bool)$res; 
    }

    /**
     * Get city name
     */
    public function getCityName($city)
    {
        $city = str_replace('-', '_', $city);

        $res = $this->createQuery()
            ->select('c.city')
            ->from('Companies_Model_Company c')
            ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->andWhere('c.city LIKE ?', array($city))
            ->limit(1)
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);

        if (count($res) > 0)
            return $res[0]['c_city'];

        return null;
    }

    /**
     *  If city in state
     */
    public function isCityInState($state, $city)
    {
        $city = str_replace('-', '_', $city);
        
        $res = $this->createQuery()
            ->select('c.city')
            ->from('Companies_Model_Company c')
            ->where('c.state = ?', mb_strtoupper($state, 'UTF-8'))
            ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->addWhere('c.city LIKE ? AND c.local_business', array($city))
            ->limit(1)
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
        
        return (bool)$res; 
    }

    /**
     * Selecting cities in current state from company table
     * 
     * @param string $state 
     */
    public function getCitiesInState($state) {
        return $this->createQuery()
            ->select("DISTINCT c.city AS city")
            ->from("Companies_Model_Company c")
            ->where("c.state = ? AND c.local_business", mb_strtoupper($state, "UTF-8"))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->orderBy("city ASC")
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
    }
    
    /**
     * Get companies by city and category
     * @param type $city
     * @param type $catId 
     */
    public function getCompaniesByCityCategoryQuery($city, $state, $catId = null)
    {
        $city = str_replace('-', '_', $city);
        $rStatus = Companies_Model_Review::STATUS_PUBLISHED;
        
        $q = $this->createQuery('c')
            ->select('c.*')
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . $rStatus . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count");

        if ($catId === null)
        {
            $q->where('ISNULL(c.category_id)');
        }
        else
        {
            $q->where('c.category_id = ?', $catId);
        }
        
        $q->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->addWhere('c.local_business')
            ->addWhere('c.city LIKE ? AND c.state = ?', array($city, mb_strtoupper($state, 'UTF-8')))
            ->orderBy('rating DESC');
        
        return $q;
    }
    
    /**
     * Query for pagination
     * @param int $categoryId
     * @param string $state
     * @param string $city
     * @return Doctrine_Query 
     */
    public function getCompaniesByCategoryQuery($categoryId, $state=null, $city=null, $orderByRating=true) {
        if ($city && $state) {
            $city = str_replace("-", "_", $city);
            $state = mb_strtoupper($state, "UTF-8");
        }

        $rStatus = Companies_Model_Review::STATUS_PUBLISHED;
        $query = $this->createQuery("c")
            ->select("c.*")
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . $rStatus . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . $rStatus . "'
                AND rc.company_id = c.id) as review_count")
            ->where("c.category_id = ?", array($categoryId))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses());

        if ($city && $state) {
            $query->addWhere("c.local_business");
            $query->addWhere("c.state = ? AND c.city LIKE ?", array($state, $city));
        }

        if ($orderByRating) {
            $query->orderBy("rating DESC");
        } else {
            $query->orderBy("name ASC");
        }

        return $query;
    }

    /**
     * Query for pagination
     * @param int $categoryId
     * @param string $state
     * @param string $city
     * @return Doctrine_Query
     */
    public function getCompanyCountByCategory($categoryId) {
        $res = $this->createQuery("c")
            ->select("COUNT(c.id) AS count")
            ->where("c.category_id = ?", array($categoryId))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->execute();

        if ($res) {
            $res = (int) $res[0]->count;
        } else {
            $res = 0;
        }

        return $res;
    }

    /**
     * Query for pagination
     * @param string $letter
     * @return Doctrine_Query
     */
    public function getCompanyCountByLetter($letter) {
        $res = $this->createQuery("c")
            ->select("COUNT(c.id) AS count")
           ->where("UPPER(SUBSTR(c.name, 1, 1)) = UPPER(?)", array($letter))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->execute();

        if ($res) {
            $res = (int) $res[0]->count;
        } else {
            $res = 0;
        }

        return $res;
    }

    /**
     * Query for pagination
     * @param string $letter
     * @return Doctrine_Query
     */
    public function getCompaniesByLetterQuery($letter) {
        return $this->createQuery("c")
            ->select("c.*")
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count")
            ->where("UPPER(SUBSTR(c.name, 1, 1)) = UPPER(?)", array($letter))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->orderBy("name ASC");
    }

    /**
     * Query for pagination
     * @param int $categoryId
     * @return Doctrine_Query
     */
    public function getNationalCompaniesByCategoryQuery($categoryId) {
        $rStatus = Companies_Model_Review::STATUS_PUBLISHED;

        return $this->createQuery('c')
            ->select('c.*')
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . $rStatus . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . $rStatus . "'
                AND rc.company_id = c.id) as review_count")
            ->where('c.category_id = ?', array($categoryId))
            ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->addWhere('NOT c.local_business')
            ->orderBy('rating DESC');
    }
    
    /**
     * Query for pagination
     * 
     * @return Doctrine_Query 
     */
    public function getUncategorizedCompaniesQuery($state, $city)
    {
        $city = str_replace('-', '_', $city);
        $state = mb_strtoupper($state, 'UTF-8');
        $rStatus = Companies_Model_Review::STATUS_PUBLISHED;
        
        return $this->createQuery('c')
            ->select('c.*')
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . $rStatus . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . $rStatus . "'
                AND rc.company_id = c.id) as review_count")
            ->where('ISNULL(c.category_id) AND c.local_business')
            ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->addWhere('c.state = ? AND c.city LIKE ?', array($state, $city))
            ->orderBy('rating DESC');
    }

    /**
     * Get uncategorized companies
     * @return Doctrine_Query
     */
    public function getUncategorizedCompanies() {
        $rStatus = Companies_Model_Review::STATUS_PUBLISHED;

        return $this->createQuery("c")
            ->select("c.*")
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . $rStatus . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . $rStatus . "'
                AND rc.company_id = c.id) as review_count")
            ->where("ISNULL(c.category_id)")
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->orderBy("rating DESC")
            ->execute();
    }
    
    /**
     * Query for search result pagination
     * @param string $searchString
     * @param array $statuses
     */
    public function getQueryToFetchSearchAll($searchString, $statuses) {
        if (!$statuses) {
            $statuses = Companies_Model_Company::getActiveStatuses();
        }

        return $this->createQuery('c')
            ->select('c.*')
            ->addSelect("(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND r.company_id = c.id) as rating")
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count")
            ->where('c.name LIKE ?', array('%' . $searchString . '%'))
            ->andWhereIn('c.status', $statuses)
            ->orderBy('c.id DESC');
    }

    /**
     * Get company with the given name
     * @param string $name
     * @return Companies_Model_Company
     */
    public function getCompanyWithName($name) {
        $res = $this->createQuery("c")
            ->select("c.*")
            ->where("c.name LIKE ?", array($name))
            ->execute();
        
        return count($res) ? $res->get(0) : null;
    }
    
    /**
     * Searching active company by uri
     * 
     * @param type $uri
     * @return type 
     */
    public function findFirstByUri($uri)
    {
        $res = $this->createQuery('c')
            ->select('c.*, COUNT(r.id) as review_count, ROUND(AVG(r.rating), 2) as rating')
            ->leftJoin('c.reviews r')
            ->where('c.uri = ? AND r.status = ?', array($uri, Companies_Model_Review::STATUS_PUBLISHED))
            ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->execute();
        
        return $res->count() ? $res->get(0) : false;
    }

    /**
     * Company with uri exists
     * @param type $uri
     * @return type
     */
    public function existsByUri($uri) {
        $res = $this->createQuery("c")
            ->select("c.*")
            ->where("c.uri = ?", array($uri))
            ->limit(1)
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);

        return (bool) $res;
    }


    
    /**
     * Searching company with rating data
     * 
     * @param int $id
     * @return Doctrine_Collection 
     */
    public function findCompany($id)
    {
        return $this->createQuery('c')
                    ->select('c.*, COUNT(r.id) as review_count, ROUND(AVG(r.rating), 2) as rating')
                    ->leftJoin('c.reviews r')
                    ->where('c.id = ? AND r.status = ?', array($id, Companies_Model_Review::STATUS_PUBLISHED))
                    ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
                    ->execute();
    }
    
    /**
     * Counting companies wich does not belong any category
     * 
     * @return Companies_Model_Company with companies_count property
     */
    public function getUncategorizedCompaniesCount($state, $city)
    {
        $city = str_replace('-', '_', $city);
        
        return $this->createQuery()
            ->select('COUNT(c.id) as companies_count')
            ->from('Companies_Model_Company c')
            ->where('ISNULL(c.category_id)')
            ->andWhereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->addWhere('c.state = ? AND c.city LIKE ? AND c.local_business', array($state, $city))
            ->execute()->get(0);
    }
    
    /**
     * Get expiring companies
     */
    public function getExpiringCompanies() {
        return $this->createQuery('c')
            ->select('c.*')
            ->from('Companies_Model_Company c')
            ->where('c.status = ?', Companies_Model_Company::STATUS_ACTIVE)
            ->addWhere('c.payment_date IS NOT NULL AND ADDDATE(c.payment_date, 1) < NOW()')
            ->execute();
    }
    
    /**
     * Get companies that are ready to be suspended
     */
    public function getCompaniesToSuspend() {
        return $this->createQuery('c')
            ->select('c.*')
            ->from('Companies_Model_Company c')
            ->where('c.status = ?', Companies_Model_Company::STATUS_EXPIRED)
            ->addWhere('c.payment_date IS NOT NULL AND ADDDATE(c.payment_date, 8) < NOW()')
            ->execute();
    }

    /**
     * Get latest reviews
     * @param type $companyId
     * @param type $count
     */
    public function getTop($count=4)
    {
        return $this->createQuery('c')
            ->select('c.*')
            ->addSelect(
                "(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND r.company_id = c.id) as rating"
            )
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count")
            ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->orderBy('rating DESC')
            ->limit((int) $count)
            ->execute();
    }

    /**
     * Get list of available companies
     */
    public function getAvailableCompanies()
    {
        return $this->createQuery('c')
            ->select('c.*')
            ->addSelect(
                "(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND r.company_id = c.id) as rating"
            )
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count")
            ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->orderBy('rating DESC')
            ->execute();
    }

    /**
     * Get available companies by code
     * @param $code
     */
    public function getAvailableCompaniesByCode($code)
    {
        return $this->createQuery('c')
            ->select('c.*')
            ->addSelect(
                "(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND r.company_id = c.id) as rating"
            )
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count")
            ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->andWhere('c.code_num = ?', array($code))
            ->orderBy('rating DESC')
            ->execute();
    }
    
    /**
     * Check if company with given code exists
     * @param $code
     * @return bool
     */
    public function codeExists($code) {
        $res = $this->createQuery("c")
            ->select("c.*")
            ->where("c.code_num = ?", array($code))
            ->limit(1)
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);

        return (bool) $res;
    }

    /**
     * Get available company by id
     */
    public function getAvailableCompany($id)
    {
        $data = $this->createQuery('c')
            ->select('c.*')
            ->addSelect(
                "(SELECT ROUND(AVG(r.rating), 2)
                FROM Companies_Model_Review r
                WHERE r.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND r.company_id = c.id) as rating"
            )
            ->addSelect("(SELECT COUNT(rc.id)
                FROM Companies_Model_Review rc
                WHERE rc.status = '" . Companies_Model_Review::STATUS_PUBLISHED . "'
                AND rc.company_id = c.id) as review_count")
            ->whereIn('c.status', Companies_Model_Company::getActiveStatuses())
            ->andWhere('c.id = ?', array($id))
            ->limit(1)
            ->execute();

        return count($data) ? $data->get(0) : null;
    }

    /**
     * Get company count in particular category
     * @param int $categoryId
     * @param string $state
     * @param string $city
     * @return Doctrine_Query
     */
    public function getCategoryCompanyCount($categoryId, $state=null, $city=null) {
        if ($city && $state) {
            $city = str_replace("-", "_", $city);
            $state = mb_strtoupper($state, "UTF-8");
        }

        $query = $this->createQuery("c")
            ->select("COUNT(c.id) AS count")
            ->where("c.category_id = ?", array($categoryId))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses());

        if ($city && $state) {
            $query->addWhere("c.local_business");
            $query->addWhere("c.state = ? AND c.city LIKE ?", array($state, $city));
        }

        $res = $query->execute();

        if ($res) {
            $res = (int) $res[0]->count;
        } else {
            $res = 0;
        }

        return $res;
    }

    /**
     * Get national company count by category
     * @param int $categoryId
     */
    public function getNationalCompanyCount($categoryId) {
        $res = $this->createQuery("c")
            ->select("COUNT(c.id) AS count")
            ->where("c.category_id = ?", array($categoryId))
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->addWhere("NOT c.local_business")
            ->execute();

        if ($res) {
            $res = (int) $res[0]->count;
        } else {
            $res = 0;
        }

        return $res;
    }

    /**
     * Get national companies
     */
    public function getNationalCompanies() {
        return $this->createQuery("c")
            ->select("c.*")
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->addWhere("NOT c.local_business")
            ->execute();
    }

    /**
     * Get local companies
     */
    public function getLocalCompanies() {
        return $this->createQuery("c")
            ->select("c.*")
            ->andWhereIn("c.status", Companies_Model_Company::getActiveStatuses())
            ->addWhere("c.local_business")
            ->execute();
    }
}
